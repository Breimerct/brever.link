---
import { cn } from "@/helpers";

interface Props {
  currentPage: number;
  totalPages: number;
  hasNextPage: boolean;
  hasPreviousPage: boolean;
  urlPattern?: string;
}

const {
  currentPage,
  totalPages,
  hasPreviousPage,
  hasNextPage,
  urlPattern = "/?page=",
} = Astro.props;

// Pagination logic (unchanged)
const MAX_VISIBLE_PAGES = 6;
const DOTS_THRESHOLD = 3;
const RANGE_PADDING = 1;
const MIN_RANGE_START = 2;
const END_MARGIN = 2;

const getPageNumbers = () => {
  // Same logic as before
  // ...
  const pageNumbers: { type: "page" | "dots"; number: number }[] = [];

  if (totalPages <= MAX_VISIBLE_PAGES) {
    for (let i = 1; i <= totalPages; i++) {
      pageNumbers.push({ type: "page", number: i });
    }
    return pageNumbers;
  }

  pageNumbers.push({ type: "page", number: 1 });

  if (currentPage > DOTS_THRESHOLD) {
    pageNumbers.push({ type: "dots", number: currentPage - 2 });
  }

  let rangeStart = Math.max(MIN_RANGE_START, currentPage - RANGE_PADDING);
  let rangeEnd = Math.min(totalPages - 1, currentPage + RANGE_PADDING);

  if (currentPage <= DOTS_THRESHOLD) {
    rangeEnd = DOTS_THRESHOLD;
  }

  if (currentPage >= totalPages - END_MARGIN) {
    rangeStart = totalPages - END_MARGIN;
  }

  for (let i = rangeStart; i <= rangeEnd; i++) {
    pageNumbers.push({ type: "page", number: i });
  }

  if (currentPage < totalPages - END_MARGIN) {
    pageNumbers.push({ type: "dots", number: currentPage + 1 });
  }

  pageNumbers.push({ type: "page", number: totalPages });

  return pageNumbers;
};

const pageNumbers = getPageNumbers();
---

<nav aria-label="Pagination" class="my-4">
  <ul class="flex items-center justify-center -space-x-px h-8 text-sm">
    <li>
      {
        hasPreviousPage ? (
          <a
            href={`${urlPattern}${currentPage - 1}`}
            class="flex items-center justify-center px-3 h-8 ms-0 leading-tight text-gray-500 bg-white border border-e-0 border-gray-300 rounded-s-lg hover:bg-gray-100 hover:text-gray-700 dark:bg-gray-800 dark:border-gray-700 dark:text-gray-400 dark:hover:bg-gray-700 dark:hover:text-white"
            aria-label="Go to previous page"
          >
            <svg
              class="w-2.5 h-2.5 rtl:rotate-180"
              aria-hidden="true"
              xmlns="http://www.w3.org/2000/svg"
              fill="none"
              viewBox="0 0 6 10"
            >
              <path
                stroke="currentColor"
                stroke-linecap="round"
                stroke-linejoin="round"
                stroke-width="2"
                d="M5 1 1 5l4 4"
              />
            </svg>
          </a>
        ) : (
          <span
            class="flex items-center justify-center px-3 h-8 ms-0 leading-tight text-gray-400 bg-white border border-e-0 border-gray-300 rounded-s-lg cursor-not-allowed dark:bg-gray-800 dark:border-gray-700 dark:text-gray-600"
            aria-disabled="true"
          >
            <svg
              class="w-2.5 h-2.5 rtl:rotate-180"
              aria-hidden="true"
              xmlns="http://www.w3.org/2000/svg"
              fill="none"
              viewBox="0 0 6 10"
            >
              <path
                stroke="currentColor"
                stroke-linecap="round"
                stroke-linejoin="round"
                stroke-width="2"
                d="M5 1 1 5l4 4"
              />
            </svg>
          </span>
        )
      }
    </li>

    {
      pageNumbers.map((item) => {
        const pageNumber = item.number;

        if (item.type === "dots") {
          return (
            <li>
              <span
                class="flex items-center justify-center px-3 h-8 leading-tight text-gray-500 bg-white border border-gray-300 dark:bg-gray-800 dark:border-gray-700 dark:text-gray-400"
                aria-hidden="true"
              >
                &hellip;
              </span>
            </li>
          );
        }

        return (
          <li>
            <a
              href={`${urlPattern}${pageNumber}`}
              class={cn(
                "flex items-center justify-center px-3 h-8 leading-tight border border-gray-300 hover:bg-gray-100 hover:text-gray-700 dark:border-gray-700 dark:text-gray-400 dark:hover:bg-gray-700 dark:hover:text-white",
                pageNumber === currentPage
                  ? "z-10 text-gray-800 font-semibold bg-gray-200 border-slate-300 cursor-default dark:bg-gray-700 dark:text-white"
                  : "text-gray-500 bg-white dark:bg-gray-800",
              )}
              aria-label={`Go to page ${pageNumber}`}
            >
              {pageNumber}
            </a>
          </li>
        );
      })
    }

    <li>
      {
        hasNextPage ? (
          <a
            href={`${urlPattern}${currentPage + 1}`}
            class="flex items-center justify-center px-3 h-8 leading-tight text-gray-500 bg-white border border-gray-300 rounded-e-lg hover:bg-gray-100 hover:text-gray-700 dark:bg-gray-800 dark:border-gray-700 dark:text-gray-400 dark:hover:bg-gray-700 dark:hover:text-white"
            aria-label="Go to next page"
          >
            <svg
              class="w-2.5 h-2.5 rtl:rotate-180"
              aria-hidden="true"
              xmlns="http://www.w3.org/2000/svg"
              fill="none"
              viewBox="0 0 6 10"
            >
              <path
                stroke="currentColor"
                stroke-linecap="round"
                stroke-linejoin="round"
                stroke-width="2"
                d="m1 9 4-4-4-4"
              />
            </svg>
          </a>
        ) : (
          <span
            class="flex items-center justify-center px-3 h-8 leading-tight text-gray-400 bg-white border border-gray-300 rounded-e-lg cursor-not-allowed dark:bg-gray-800 dark:border-gray-700 dark:text-gray-600"
            aria-disabled="true"
          >
            <svg
              class="w-2.5 h-2.5 rtl:rotate-180"
              aria-hidden="true"
              xmlns="http://www.w3.org/2000/svg"
              fill="none"
              viewBox="0 0 6 10"
            >
              <path
                stroke="currentColor"
                stroke-linecap="round"
                stroke-linejoin="round"
                stroke-width="2"
                d="m1 9 4-4-4-4"
              />
            </svg>
          </span>
        )
      }
    </li>
  </ul>
</nav>
