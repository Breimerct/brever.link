---
import { cn } from "@/helpers/utils";

interface Props {
  currentPage: number;
  totalPages: number;
  hasNextPage: boolean;
  hasPreviousPage: boolean;
}

const { currentPage, totalPages, hasPreviousPage, hasNextPage } = Astro.props;

const MAX_VISIBLE_PAGES = 6;
const DOTS_THRESHOLD = 3;
const RANGE_PADDING = 1;
const MIN_RANGE_START = 2;
const END_MARGIN = 2;

const getPageNumbers = () => {
  const pageNumbers: { type: "page" | "dots"; number: number }[] = [];

  if (totalPages <= MAX_VISIBLE_PAGES) {
    for (let i = 1; i <= totalPages; i++) {
      pageNumbers.push({ type: "page", number: i });
    }
    return pageNumbers;
  }

  pageNumbers.push({ type: "page", number: 1 });

  if (currentPage > DOTS_THRESHOLD) {
    pageNumbers.push({ type: "dots", number: currentPage - 2 });
  }

  let rangeStart = Math.max(MIN_RANGE_START, currentPage - RANGE_PADDING);
  let rangeEnd = Math.min(totalPages - 1, currentPage + RANGE_PADDING);

  if (currentPage <= DOTS_THRESHOLD) {
    rangeEnd = DOTS_THRESHOLD;
  }

  if (currentPage >= totalPages - END_MARGIN) {
    rangeStart = totalPages - END_MARGIN;
  }

  for (let i = rangeStart; i <= rangeEnd; i++) {
    pageNumbers.push({ type: "page", number: i });
  }

  if (currentPage < totalPages - END_MARGIN) {
    pageNumbers.push({ type: "dots", number: currentPage + 1 });
  }

  pageNumbers.push({ type: "page", number: totalPages });

  return pageNumbers;
};

const pageNumbers = getPageNumbers();
---

<div class="w-full flex items-center justify-center my-4">
  <ul class="flex items-center -space-x-px h-8 text-sm">
    <li>
      <a
        href={`/?page=${currentPage - 1}`}
        class={cn(
          "flex items-center justify-center px-3 h-8 ms-0 leading-tight text-gray-500 bg-white border border-e-0 border-gray-300 rounded-s-lg hover:bg-gray-100 hover:text-gray-700 dark:bg-gray-800 dark:border-gray-700 dark:text-gray-400 dark:hover:bg-gray-700 dark:hover:text-white",
          {
            "cursor-not-allowed pointer-events-none": !hasPreviousPage,
          },
        )}
      >
        <span class="sr-only">Previous</span>
        <svg
          class="w-2.5 h-2.5 rtl:rotate-180"
          aria-hidden="true"
          xmlns="http://www.w3.org/2000/svg"
          fill="none"
          viewBox="0 0 6 10"
        >
          <path
            stroke="currentColor"
            stroke-linecap="round"
            stroke-linejoin="round"
            stroke-width="2"
            d="M5 1 1 5l4 4"></path>
        </svg>
      </a>
    </li>

    {
      pageNumbers.map((item) => {
        const pageNumber = item.number;

        if (item.type === "dots") {
          return (
            <li>
              <a
                href={`/?page=${pageNumber}`}
                class={cn(
                  "flex items-center justify-center px-3 h-8 leading-tight",
                  "text-gray-500 bg-white border border-gray-300",
                  "hover:bg-gray-100 hover:text-gray-700",
                  "dark:bg-gray-800 dark:border-gray-700 dark:text-gray-400",
                  "dark:hover:bg-gray-700 dark:hover:text-white",
                )}
              >
                ...
              </a>
            </li>
          );
        }

        return (
          <li>
            <a
              href={`/?page=${pageNumber}`}
              class={cn(
                "flex items-center justify-center px-3 h-8 leading-tight",
                "text-gray-500 bg-white border border-gray-300",
                "hover:bg-gray-100 hover:text-gray-700",
                "dark:bg-gray-800 dark:border-gray-700 dark:text-gray-400",
                "dark:hover:bg-gray-700 dark:hover:text-white",
                {
                  "!bg-gray-100 text-gray-700": pageNumber === currentPage,
                  "dark:!bg-gray-700 dark:!text-white":
                    pageNumber === currentPage,
                  "pointer-events-none cursor-not-allowed":
                    pageNumber === currentPage,
                },
              )}
            >
              {pageNumber}
            </a>
          </li>
        );
      })
    }

    <li>
      <a
        href={`/?page=${currentPage + 1}`}
        class={cn(
          "flex items-center justify-center px-3 h-8 leading-tight text-gray-500 bg-white border border-gray-300 rounded-e-lg hover:bg-gray-100 hover:text-gray-700 dark:bg-gray-800 dark:border-gray-700 dark:text-gray-400 dark:hover:bg-gray-700 dark:hover:text-white",
          {
            "cursor-not-allowed pointer-events-none": !hasNextPage,
          },
        )}
      >
        <span class="sr-only">Next</span>
        <svg
          class="w-2.5 h-2.5 rtl:rotate-180"
          aria-hidden="true"
          xmlns="http://www.w3.org/2000/svg"
          fill="none"
          viewBox="0 0 6 10"
        >
          <path
            stroke="currentColor"
            stroke-linecap="round"
            stroke-linejoin="round"
            stroke-width="2"
            d="m1 9 4-4-4-4"></path>
        </svg>
      </a>
    </li>
  </ul>
</div>
